#!/usr/bin/env perl
# DO NOT EDIT -- this is an auto generated file
package App::perlbrew;
use strict;
use 5.8.0;
our $VERSION = "0.01";

my $ROOT = $ENV{PERLBREW_ROOT} || "$ENV{HOME}/perl5/perlbrew";
my $CURRENT_PERL = "$ROOT/perls/current";

sub run_command {
    my ( undef, $opt, $x, @args ) = @_;
    $opt->{log_file} = "$ROOT/build.log";
    my $self = bless $opt, __PACKAGE__;
    $x ||= "help";
    my $s = $self->can("run_command_$x") or die "Unknow command: `$x`. Typo?";
    $self->$s(@args);
}

sub run_command_help {
    print <<HELP;

Usage:

    perlbrew init
    perlbrew install perl-5.11.1
    perlbrew installed
    perlbrew switch perl-5.11.1

HELP
}

sub run_command_init {
    require File::Path;
    File::Path::make_path(
        "$ROOT/perls", "$ROOT/dists", "$ROOT/build", "$ROOT/etc",
        "$ROOT/bin"
    );

    system <<RC;
echo 'export PATH=$ROOT/bin:$ROOT/perls/current/bin:\${PATH}' > $ROOT/etc/bashrc
echo 'setenv PATH $ROOT/bin:$ROOT/perls/current/bin:\$PATH' > $ROOT/etc/cshrc
RC

    my ( $shrc, $yourshrc );
    if ( $ENV{SHELL} =~ /(t?csh)/ ) {
        $shrc     = 'cshrc';
        $yourshrc = $1 . "rc";
    }
    else {
        $shrc = $yourshrc = 'bashrc';
    }

    print
"\nPerlbrew environmet Initiated. Required directories are created under $ROOT.";
    print "Please add this to the end of your ~/.$yourshrc:\n";
    print "    source $ROOT/etc/$shrc\n";
}

sub run_command_install {
    my ( $self, $dist, $opts ) = @_;

    my ( $dist_name, $dist_version ) = $dist =~ m/^(.*)-([\d.]+)$/;
    if ( $dist_name eq 'perl' ) {
        require LWP::UserAgent;
        my $ua = LWP::UserAgent->new;

        print "Fetching $dist...";
        my $r = $ua->get("http://search.cpan.org/dist/$dist");
        die "Fail to fetch the dist of $dist." unless $r->is_success;

        my $html = $r->content;
        my ( $dist_path, $dist_tarball ) = $html =~
m[<a href="(/CPAN/authors/id/.+/(${dist}.tar.(gz|bz2)))">Download</a>];

        $r = $ua->get(
            "http://search.cpan.org/${dist_path}",
            ":content_file" => "$ROOT/dists/${dist_tarball}"
        );
        die "Fail to fetch the dist of $dist." unless $r->is_success;
        my @d_options = @{ $self->{D} };
        my $as = $self->{as} || $dist;
        unshift @d_options, qq(prefix=$ROOT/perls/$as);
        push @d_options, "usedevel" if $dist_version =~ /5\.11/;
        print "Installing $dist...";
        my $tarx = "tar " . ( $dist_tarball =~ /bz2/ ? "xjf" : "xzf" );

        my $cmd = join ";",
          (
            "cd $ROOT/build",
            "$tarx $ROOT/dists/${dist_tarball}",
            "cd $dist",
            "rm -f config.sh Policy.sh",
            "sh Configure -de " . join( ' ', map { "-D$_" } @d_options ),
            "make",
            (
                $self->{force}
                ? ( 'make test', 'make install' )
                : "make test && make install"
            )
          );
        $cmd = "($cmd) >> '$self->{log_file}' 2>&1 "
          if ( $self->{quiet} && !$self->{verbose} );
        system($cmd);
    }
}

sub run_command_installed {
    my $self    = shift;
    my $current = readlink("$ROOT/perls/current");
    for (<$ROOT/perls/*>) {
        next if m/current/;
        my ($name) = $_ =~ m/\/([^\/]+$)/;
        print $name, ( $name eq $current ? '(*)' : '' ), "\n";
    }
}

sub run_command_switch {
    my ( $self, $dist ) = @_;
    die "${dist} is not installed\n" unless -d "$ROOT/perls/${dist}";
    unlink "$ROOT/perls/current";
    system "cd $ROOT/perls; ln -s $dist current";
    for my $executable (<$ROOT/perls/current/bin/*>) {
        my ($name) = $executable =~ m/bin\/(.+)5\.\d.*$/;
        system("ln -fs $executable $ROOT/bin/${name}");
    }
}

1;


package main;
#!perl
use strict;
use App::perlbrew;
use Getopt::Long qw(:config pass_through);
use Pod::Usage;

my $opt = {
    force => undef,
    quiet => 1,
    D     => [],
};
GetOptions(
    'f|force!'  => \$opt->{force},
    'q|quiet!'  => \$opt->{quiet},
    'v|verbose' => \$opt->{verbose},
    'as=s'      => \$opt->{as},
    'D|D=s@'    => $opt->{D},
    'help|?'    => sub { pod2usage(1) },
) or pod2usage(2);
App::perlbrew->run_command( $opt, @ARGV );

__END__

=head1 NAME

perlbrew - Perl Environment manager.

=head1 SYNOPSIS

    perlbrew [options] [init|install|installed|switch]

    # Initialize
    perlbrew init

    # Install some Perls
    perlbrew install perl-5.10.1
    perlbrew install perl-5.11.5

    # See what were installed
    perlbrew installed

    # Switch perl in the $PATH
    perlbrew switch perl-5.11.5
    perl -v
    
    perlbrew switch perl-5.10.1
    perl -v

=head1 OPTIONS

=over 4

=item B<-?|help>

prints this help

=item B<-f|force>

Force installation of a perl

=item B<-q|quiet>

Log output to a log file rather than STDOUT. This is the default.

=item B<-v|verbose>

Log output to STDOUT rather than a logfile

=item B<-as>

Install a given perl under an alias. 

    perlbrew install perl-5.6.2 -as legacy-perl

=item B<-D>

pass through switches to the perl Configure script

    perlbrew install perl-5.10.1 -D=usemymalloc

=back

=head1 DESCRIPTION

B<This program> will read the given input file(s) and do something
useful with the contents thereof.

=cut
